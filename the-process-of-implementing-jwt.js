///? The process of implementing JWT:

//TODO: We need to follow the procedure to implement the JWT in our application
//*  firstly, we need to create a jwt token on the server side. npm install jsonwebtoken . then const jwt = require(‘jsonwebtoken’) . then create an API for GET request. Here create a jwt token with user,secret key and expiresIn object in parameter. Then send the accessToken to the client side as a response. On the client side, When the user successfully authenticates the system with login or signUP, we request that API to get the accessToken; the server sends the accessToken and we need to store the token in localStorage or Cookies on the browser. Secondly, In the secure pages of our application, We request for the specific data with the user email in query search parameter and with the token in headers to the server. (headers:{authentication: `Bearer ${localStorage.getItem(‘accessToken’)}`})On the server, we create an API for that request. This API needs a middleware to verify the token that comes in the request headers. In the middleware, we receive three parameters req,res and next. We receive the headers with req.headers.authentication. We need to check whether the header has come or not. If not, we return from the middleware with the res.status(404). If the header comes, we need to split it and then take the number 1 index to receive the token. Then verify the token with the token,secure key, (err,decoded) callback function in the parameter. If we got an err, we return from the middle ware with the res.status(403) . if we got decoded, we send the req.decoded = decoded and call the next function. Now our newly created API that receives the verifyJWT middleware will receive a decodedEmail in req.docoded.email . Now we need to check the email that comes from the req.query and the decodeEmail .If both are the same we send the response with the specific data the client wants. If both don't match, we send res.status(403). On the client side we receive the response. If we get the specific data, we can show it on the UI. If we get the status 403, we need to signOut the user and navigate to the login page to authenticate one more time to verify the user.
